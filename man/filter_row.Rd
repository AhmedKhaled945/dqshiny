% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_row.R, R/filtering.R
\name{filter_row}
\alias{filter_row}
\alias{get_filters}
\alias{text_filter}
\alias{range_filter}
\title{Functions to create and use filter}
\usage{
filter_row(context, data, filters = "T", reset = TRUE,
  sorting = FALSE)

get_filters(input, context)

text_filter(df, values)

range_filter(df, ranges)
}
\arguments{
\item{context}{a string context to specify ui element id's}

\item{data}{data to show in the table, should be a data.frame}

\item{filters}{optional character vector, adds filters for each column,
values must be one of c("T", "S", "R", "") to add a TextFilter, SelectFilter,
RangeFilter or none, vectors of length one will add a filter of this type
for each column}

\item{reset}{optional, should a reset button be added or not}

\item{sorting}{optional, wheather to add buttons to sort data or not}

\item{input}{shiny input environment}

\item{df}{data frame to filter}

\item{values}{character array with the filter values, should have length of data or being named}

\item{ranges}{numeric (or numeric makeable) vector with the filter values, should have length of data or being named}
}
\value{
filter_row: fluidRow containing the filters

getFilter: list of filter values

text_filter: filtered data frame

range_filter: filtered data frame
}
\description{
FilterRow creates a fluidRow with several textInputs or
selectInputs for filtering a table.#' Will also add a button to clear
all filter values.

get_filters receives the values from all filters within the given context and returns them in a list.

text_filter filters a given data frame with the given filter values. Names of the given values vector should be
the indices of the corresponding data frame columns. All filters are case-ignoring.

range_filter filters a given data frame with the given filter values. Names of the given ranges vector should be
the indices of the corresponding data frame columns.
}
\examples{
\donttest{library(shiny)
library(rhandsontable)

hw <- c("Hello", "my", "funny", "world!")
data <- data.frame(A=rep(hw, 5), B=rep(hw[c(2,3,4,1)], 5), C=1:20,
  D=Sys.Date()-0:19, stringsAsFactors = FALSE)
rVals <- reactiveValues()
rVals[["rand"]] <- data

shinyApp(
  ui = fluidPage(
    filter_row("rand", data, c("T", "S", "R", "R"), FALSE),
    rHandsontableOutput("randomTable")
  ),
  server = function(input, output) {
    output$randomTable <- renderRHandsontable({
      rhandsontable(rVals[["rand"]])
    })
    observeEvent(get_filters(input, "rand"), {
      fVals <- get_filters(input, "rand")
      df <- text_filter(data, fVals[sapply(fVals, function(x) length(x) == 1)])
      rVals[["rand"]] <- range_filter(df, fVals[sapply(fVals, function(x) length(x) > 1)])
    }, ignoreInit = TRUE)
  }
)}
}
\author{
richard.kunze
}
